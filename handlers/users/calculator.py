from filters import IsPrivate
from states import calculator as cal
from loader import dp
from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

to_pay_btn = InlineKeyboardMarkup(row_width=1,
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data='next_gold')
                                      ]
                                  ])


@dp.message_handler(IsPrivate(), text='üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
async def calculator(message: types.Message, state: FSMContext):
    await state.reset_state()
    msg = await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ –∫–æ–ø–µ–µ–∫):')
    await state.update_data(message_ids=msg.message_id)
    await cal.num.set()


@dp.callback_query_handler(text='calculator')
async def calculator(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    msg = await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ –∫–æ–ø–µ–µ–∫):')
    await state.update_data(message_ids=msg.message_id)
    await cal.num.set()


@dp.message_handler(IsPrivate(), state=cal.num)
async def total_number(message: types.Message, state: FSMContext):
    chislo = float(message.text)
    total = chislo * 0.67
    await state.reset_state()
    await message.answer(f"{chislo} —Ä—É–±–ª–µ–π - {total} –∑–æ–ª–æ—Ç–∞.", reply_markup=to_pay_btn)
